plugins {
    // Apply the application plugin to add support for building a CLI application.
    id 'application'

    id 'scala'

    id 'com.twilio.guardrail' version '0.62.2'
}

repositories {
    mavenCentral()
    gradlePluginPortal()
}

ext {
    scalaVersionFull = '2.13.5'
    scalaVersion = '2.13'
}

configurations {
    betterMonadicFor
    kindProjectorPlugin
}

dependencies {
    // Scala version
    implementation "org.scala-lang:scala-library:${scalaVersionFull}"

    // cats
    implementation "org.typelevel:cats-core_${scalaVersion}:2.3.1"
    implementation "org.typelevel:cats-effect_${scalaVersion}:2.3.3"

    // circe
    implementation "io.circe:circe-core_${scalaVersion}:0.13.0"
    implementation "io.circe:circe-parser_${scalaVersion}:0.13.0"

    // http4s
    implementation "org.http4s:http4s-blaze-client_${scalaVersion}:0.21.19"
    implementation "org.http4s:http4s-blaze-server_${scalaVersion}:0.21.19"
    implementation "org.http4s:http4s-circe_${scalaVersion}:0.21.19"
    implementation "org.http4s:http4s-dsl_${scalaVersion}:0.21.19"

    implementation "dev.zio:zio_${scalaVersion}:1.0.4-2"
    implementation "dev.zio:zio-interop-cats_${scalaVersion}:2.2.0.1"

    betterMonadicFor group: 'com.olegpy', name: "better-monadic-for_${scalaVersion}", version: '0.3.1'

    kindProjectorPlugin group: 'org.typelevel', name: "kind-projector_${scalaVersionFull}", version: '0.11.3'
}

application {
    // Define the main class for the application.
    mainClassName = 'example.App'
}

guardrail {
    // generate a server stub in scala with http4s resources
    petstoreServer {
        inputFile = file('src/main/resources/server.yaml')
        gen {
            packageName = 'example.server'
            kind = 'server'
            language = 'scala'
            framework = 'http4s'
        }
    }
}

compileJava.dependsOn guardrail.petstoreServer.gen

// sourceSets.main.scala.srcDirs += 'build/guardrail-sources/scala'
sourceSets.main.scala.srcDirs += new File(buildDir, 'guardrail-sources/scala')

tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = [
        "-Xplugin:" + configurations.kindProjectorPlugin.asPath,
        "-Xplugin:" + configurations.betterMonadicFor.asPath,
    ]
}
